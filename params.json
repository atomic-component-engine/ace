{"name":"Atomic Component Engine","tagline":"This is a yeoman generator for an atomic design system","body":"ACE v0.2.7\r\n=======================\r\n\r\n### Dependancies \r\n1. Node.js\r\n2. npm\r\n\r\n---\r\n\r\n* [Quick Start](#quick)\r\n\t* [Getting Started](#getting-started)\r\n \t* [ACE Init](#ace-init)\r\n \t* [Component generation](#component-generation)\r\n \t* [Page generation](#page-generation)\r\n\r\n* [Sublime Text Project](#sublime-text-project)\r\n* [Todos](#todos)\r\n\r\nACE is a system for creating and maintaining Frontend projects. It builds on the ideas forwarded by [Brad Frost](http://bradfrostweb.com/blog/post/atomic-web-design/) where instead of designing pages, we design and develop a system of components. \r\n\r\nThis system has 2 main elements. The boilerplate, which consists of a Grunt based project, and a component generator, both of which are managed by Yeoman. \r\n\r\n\r\n#### Getting Started\r\n\r\n![install generator](https://raw.githubusercontent.com/pjhauser/atomic-component-system/master/gifs/install.gif)\r\n\r\n\r\n1. Download the [zip](https://github.com/pjhauser/atomic-component-system/archive/master.zip).\r\n2. Extract the downloaded zip\r\n3. `cd` into the `generator-ace` directory\r\n4. Run `npm install -g`\r\n5. cd into the working directory of your project\r\n6. Run `yo ace init` and follow the instructions\r\n\r\n\r\n#### ace Init\r\n\r\n![init generator](https://raw.githubusercontent.com/pjhauser/atomic-component-engine/master/gifs/init.gif)\r\n\r\nThis task initialises the directory with the main boilerplate. You will be asked 5 questions:\r\n\r\n1. Do you want to init this directory with ACE (Y/n)\r\n2. Sweet! What identifier should we use for your app? (e.g. my-atomic-website) *This is the name of your project in the package.json file*\r\n3. What is the base URL of the directory? *This is for the script and css paths of the template*\r\n4. Are you using Git? *This will add the base gitignore*\r\n5. Do you want your name and email to be placed in the header of all of the compoenents you create? *This is useful in teams and ace will read these details from your gitconfig if present*\r\n\r\n\r\nNow your directory has the base boilerplate you'll want to start creating components. \r\n\r\n\r\n#### Component generation\r\n\r\nYou can use the same yeoman generator to create components. Just type:\r\n\r\n1. yo ace\r\n2. Select component type\r\n3. Name component\r\n\r\nThe generator will then create a component in the following folder structure:\r\n\r\n\t| --> /atoms\r\n\t\t  |--> /atom_name\r\n\t\t\t   | --> atom_name.jade\r\n\t\t\t   | --> atom_name.js\r\n\t\t\t   | --> atom_name.sass\r\n\t\t\t   | --> demo_atom_name.jade\r\n\r\n\r\n#### Page generation\r\n\r\nPages are a little different to compoenents, ideally these should have minimal CSS and JS, as this should all be performed on the sub-page component level. \r\n\r\n1. yo ace page\r\n2. Name component / page\r\n3. Select template type\r\n\r\n---\r\n\r\n### Sublime Text Project\r\nIncluded in the init boilerplate is a file named `ace.sublime-project`. Opening this file will launch sublime text with a custom file structure and some other small settings. File structure:\r\n\r\n\t| --> /src\r\n\t| --> /01. Atoms\r\n\t| --> /02. Molecules\r\n\t| --> /03. Organisms\r\n\t| --> /04. Templates\r\n\t| --> /05. Pages\r\n\r\n\r\n---\r\n\r\n\r\n### Todos \r\n* Create an example webpage using this generator. \r\n\r\n### Contributing\r\nWe welcome pull requests. This project uses [nvie](https://github.com/nvie)'s super helpful [gitflow](https://github.com/nvie/gitflow) branching model; as such please branch your features from ```develop```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}